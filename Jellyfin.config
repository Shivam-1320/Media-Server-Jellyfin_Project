# Block direct access via IP for HTTP
server {
    listen 80;
    server_name _;  # Matches requests made to an IP address or non-matching domain name

    # Return 403 Forbidden for direct access to IP
    return 403;
}

# Block direct access via IP for HTTPS
server {
    listen 443 ssl;
    server_name _;  # Matches requests made to an IP address or non-matching domain name

    ssl_certificate /etc/letsencrypt/live/yourname.cloud/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourname.cloud/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Return 403 Forbidden for direct access to IP
    return 403;
}

# Jellyfin Reverse Proxy Configuration (Modify this section based on your previous Jellyfin setup)
server {
    listen 80;
    server_name yourdomain.com;  #Change with your domain name 

    # Redirect HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name yourdomain.com;  #Change with your domain name 

    ssl_certificate /etc/letsencrypt/live/yourname.cloud/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourname.cloud/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Proxy Pass to Jellyfin
    location / {
        proxy_pass http://127.0.0.1:8096/;  # Jellyfin is running on port 8096
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /socket {
        proxy_pass http://127.0.0.1:8096/socket;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_http_version 1.1;
    }
}
